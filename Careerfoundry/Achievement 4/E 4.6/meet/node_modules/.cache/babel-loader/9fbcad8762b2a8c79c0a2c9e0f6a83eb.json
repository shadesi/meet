{"ast":null,"code":"// src/api.js\nimport mockData from\"./mock-data\";/**\n * Extract locations from the events data, removing duplicates.\n * @param {*} events - array of event objects\n * @returns Array of unique locations\n */export const extractLocations=events=>{const extractedLocations=events.map(event=>event.location);const locations=[...new Set(extractedLocations)];return locations;};/**\n * Get the access token from localStorage or redirect to Google authorization.\n * @returns Promise resolving to the access token\n */export const getAccessToken=async()=>{const accessToken=localStorage.getItem('access_token');const tokenCheck=accessToken&&(await checkToken(accessToken));if(!accessToken||tokenCheck.error){await localStorage.removeItem(\"access_token\");const searchParams=new URLSearchParams(window.location.search);const code=searchParams.get(\"code\");if(!code){const response=await fetch(\"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\");const result=await response.json();const{authUrl}=result;window.location.href=authUrl;}else{return await getToken(code);}}return accessToken;};/**\n * Check the validity of the access token.\n * @param {string} accessToken - the token to check\n * @returns Promise resolving to the token information\n */const checkToken=async accessToken=>{const response=await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);return await response.json();};/**\n * Fetch the list of events, using mock data for localhost.\n * @param {string} currentCity - the selected city\n * @param {number} currentNOE - the number of events to fetch\n * @returns Promise resolving to the array of events\n */export const getEvents=async(currentCity,currentNOE)=>{if(window.location.href.startsWith(\"http://localhost\")){return mockData.slice(0,currentNOE);// Simulate fetching a specific number of events\n}const token=await getAccessToken();if(token){removeQuery();const url=`YOUR_GET_EVENTS_API_ENDPOINT/${token}?city=${currentCity}&number=${currentNOE}`;// Modify to include city and number\nconst response=await fetch(url);const result=await response.json();return result.events||null;}};/**\n * Remove the query parameters from the URL.\n */const removeQuery=()=>{let newurl;if(window.history.pushState&&window.location.pathname){newurl=`${window.location.protocol}//${window.location.host}${window.location.pathname}`;window.history.pushState(\"\",\"\",newurl);}else{newurl=`${window.location.protocol}//${window.location.host}`;window.history.pushState(\"\",\"\",newurl);}};/**\n * Retrieve the access token using the provided authorization code.\n * @param {string} code - the authorization code from Google\n * @returns Promise resolving to the access token\n */const getToken=async code=>{const encodeCode=encodeURIComponent(code);const response=await fetch(`YOUR_GET_ACCESS_TOKEN_ENDPOINT/${encodeCode}`);const{access_token}=await response.json();if(access_token){localStorage.setItem(\"access_token\",access_token);}return access_token;};","map":{"version":3,"names":["mockData","extractLocations","events","extractedLocations","map","event","location","locations","Set","getAccessToken","accessToken","localStorage","getItem","tokenCheck","checkToken","error","removeItem","searchParams","URLSearchParams","window","search","code","get","response","fetch","result","json","authUrl","href","getToken","getEvents","currentCity","currentNOE","startsWith","slice","token","removeQuery","url","newurl","history","pushState","pathname","protocol","host","encodeCode","encodeURIComponent","access_token","setItem"],"sources":["/Users/shanedesilva/Desktop/Careerfoundry/Achievement 4/E 4.5/meet/src/api.js"],"sourcesContent":["// src/api.js\n\nimport mockData from \"./mock-data\";\n\n/**\n * Extract locations from the events data, removing duplicates.\n * @param {*} events - array of event objects\n * @returns Array of unique locations\n */\nexport const extractLocations = (events) => {\n  const extractedLocations = events.map((event) => event.location);\n  const locations = [...new Set(extractedLocations)];\n  return locations;\n};\n\n/**\n * Get the access token from localStorage or redirect to Google authorization.\n * @returns Promise resolving to the access token\n */\nexport const getAccessToken = async () => {\n  const accessToken = localStorage.getItem('access_token');\n  const tokenCheck = accessToken && (await checkToken(accessToken));\n\n  if (!accessToken || tokenCheck.error) {\n    await localStorage.removeItem(\"access_token\");\n    const searchParams = new URLSearchParams(window.location.search);\n    const code = searchParams.get(\"code\");\n\n    if (!code) {\n      const response = await fetch(\"YOUR_SERVERLESS_GET_AUTH_URL_ENDPOINT\");\n      const result = await response.json();\n      const { authUrl } = result;\n      window.location.href = authUrl;\n    } else {\n      return await getToken(code);\n    }\n  }\n  return accessToken;\n};\n\n/**\n * Check the validity of the access token.\n * @param {string} accessToken - the token to check\n * @returns Promise resolving to the token information\n */\nconst checkToken = async (accessToken) => {\n  const response = await fetch(`https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`);\n  return await response.json();\n};\n\n/**\n * Fetch the list of events, using mock data for localhost.\n * @param {string} currentCity - the selected city\n * @param {number} currentNOE - the number of events to fetch\n * @returns Promise resolving to the array of events\n */\nexport const getEvents = async (currentCity, currentNOE) => {\n  if (window.location.href.startsWith(\"http://localhost\")) {\n    return mockData.slice(0, currentNOE); // Simulate fetching a specific number of events\n  }\n\n  const token = await getAccessToken();\n  if (token) {\n    removeQuery();\n    const url = `YOUR_GET_EVENTS_API_ENDPOINT/${token}?city=${currentCity}&number=${currentNOE}`; // Modify to include city and number\n    const response = await fetch(url);\n    const result = await response.json();\n    return result.events || null;\n  }\n};\n\n/**\n * Remove the query parameters from the URL.\n */\nconst removeQuery = () => {\n  let newurl;\n  if (window.history.pushState && window.location.pathname) {\n    newurl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n    window.history.pushState(\"\", \"\", newurl);\n  } else {\n    newurl = `${window.location.protocol}//${window.location.host}`;\n    window.history.pushState(\"\", \"\", newurl);\n  }\n};\n\n/**\n * Retrieve the access token using the provided authorization code.\n * @param {string} code - the authorization code from Google\n * @returns Promise resolving to the access token\n */\nconst getToken = async (code) => {\n  const encodeCode = encodeURIComponent(code);\n  const response = await fetch(`YOUR_GET_ACCESS_TOKEN_ENDPOINT/${encodeCode}`);\n  const { access_token } = await response.json();\n  if (access_token) {\n    localStorage.setItem(\"access_token\", access_token);\n  }\n  return access_token;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}